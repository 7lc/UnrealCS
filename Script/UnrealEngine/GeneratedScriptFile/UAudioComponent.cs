using System;
namespace UnrealEngine
{
	public partial class UAudioComponent:USceneComponent
	{
		public extern bool BP_GetAttenuationSettingsToApply(out FSoundAttenuationSettings OutAttenuationSettings);
		/// <summary>Modify the attenuation settings of the audio component</summary>
		public extern void AdjustAttenuation(FSoundAttenuationSettings InAttenuationSettings);
		/// <summary>Set whether sounds generated by this audio component should be considered UI sounds</summary>
		public extern void SetUISound(bool bInUISound);
		/// <summary>Set a new pitch multiplier</summary>
		public extern void SetPitchMultiplier(float NewPitchMultiplier);
		/// <summary>Set a new volume multiplier</summary>
		public extern void SetVolumeMultiplier(float NewVolumeMultiplier);
		/// <summary>Set an integer instance parameter for use in sound cues played by this audio component</summary>
		public extern void SetIntParameter(FName InName,int InInt);
		/// <summary>Set a boolean instance parameter for use in sound cues played by this audio component</summary>
		public extern void SetBoolParameter(FName InName,bool InBool);
		/// <summary>Set a sound wave instance parameter for use in sound cues played by this audio component</summary>
		public extern void SetWaveParameter(FName InName,USoundWave InWave);
		/// <summary>Set a float instance parameter for use in sound cues played by this audio component</summary>
		public extern void SetFloatParameter(FName InName,float InFloat);
		/// <summary>This will allow one to adjust the volume of an AudioComponent on the fly</summary>
		public extern void AdjustVolume(float AdjustVolumeDuration,float AdjustVolumeLevel);
		/// <summary>@return true if this component is currently playing a SoundCue.</summary>
		public extern virtual bool IsPlaying();
		/// <summary>Pause an audio component playing its sound cue, issue any delegates if needed</summary>
		public extern void SetPaused(bool bPause);
		/// <summary>Stop an audio component playing its sound cue, issue any delegates if needed</summary>
		public extern virtual void Stop();
		/// <summary>Start a sound playing on an audio component</summary>
		public extern virtual void Play(float StartTime=0.000000f);
		/// <summary>
		/// This is used in place of "stop" when it is desired to fade the volume of the sound before stopping.
		/// If FadeTime is 0.0, this is the same as calling Stop().
		/// If FadeTime is > 0.0, this will adjust the volume multiplier to FadeVolumeLevel over FadeInTime seconds
		/// and then stop the sound.
		/// @param FadeOutDuration how long it should take to reach the FadeVolumeLevel
		/// @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume in which to fade to
		/// </summary>
		public extern virtual void FadeOut(float FadeOutDuration,float FadeVolumeLevel);
		/// <summary>
		/// This can be used in place of "play" when it is desired to fade in the sound over time.
		/// If FadeTime is 0.0, the change in volume is instant.
		/// If FadeTime is > 0.0, the multiplier will be increased from 0 to FadeVolumeLevel over FadeIn seconds.
		/// @param FadeInDuration how long it should take to reach the FadeVolumeLevel
		/// @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume to fade to
		/// </summary>
		public extern virtual void FadeIn(float FadeInDuration,float FadeVolumeLevel=1.000000f,float StartTime=0.000000f);
		/// <summary>Set what sound is played by this component</summary>
		public extern void SetSound(USoundBase NewSound);
		/// <summary>The sound to be played</summary>
		public USoundBase Sound;
		
		/// <summary>Optional sound group this AudioComponent belongs to</summary>
		public USoundClass SoundClassOverride;
		
		/// <summary>Auto destroy this component on completion</summary>
		public bool bAutoDestroy;
		
		/// <summary>Stop sound when owner is destroyed</summary>
		public bool bStopWhenOwnerDestroyed;
		
		/// <summary>Whether the wave instances should remain active if they're dropped by the prioritization code. Useful for e.g. vehicle sounds that shouldn't cut out.</summary>
		public bool bShouldRemainActiveIfDropped;
		
		/// <summary>Is this audio component allowed to be spatialized?</summary>
		public bool bAllowSpatialization;
		
		/// <summary>Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties</summary>
		public bool bOverrideAttenuation;
		
		/// <summary>Whether or not to override the sound's subtitle priority.</summary>
		public bool bOverrideSubtitlePriority;
		
		/// <summary>Whether or not this sound plays when the game is paused in the UI</summary>
		public bool bIsUISound;
		
		/// <summary>Whether or not to apply a low-pass filter to the sound that plays in this audio component.</summary>
		public bool bEnableLowPassFilter;
		
		public bool bOverridePriority;
		
		/// <summary>If true, subtitles in the sound data will be ignored.</summary>
		public bool bSuppressSubtitles;
		
		/// <summary>The lower bound to use when randomly determining a pitch multiplier</summary>
		public float PitchModulationMin;
		
		/// <summary>The upper bound to use when randomly determining a pitch multiplier</summary>
		public float PitchModulationMax;
		
		/// <summary>The lower bound to use when randomly determining a volume multiplier</summary>
		public float VolumeModulationMin;
		
		/// <summary>The upper bound to use when randomly determining a volume multiplier</summary>
		public float VolumeModulationMax;
		
		/// <summary>A volume multiplier to apply to sounds generated by this component</summary>
		public float VolumeMultiplier;
		
		/// <summary>A priority value that is used for sounds that play on this component that scales against final output volume.</summary>
		public float Priority;
		
		/// <summary>Used by the subtitle manager to prioritize subtitles wave instances spawned by this component.</summary>
		public float SubtitlePriority;
		
		public float VolumeWeightedPriorityScale;
		
		/// <summary>A pitch multiplier to apply to sounds generated by this component</summary>
		public float PitchMultiplier;
		
		public float HighFrequencyGainMultiplier;
		
		/// <summary>The frequency of the lowpass filter (in hertz) to apply to this voice. A frequency of 0.0 is the device sample rate and will bypass the filter.</summary>
		public float LowPassFilterFrequency;
		
		/// <summary>If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component</summary>
		public USoundAttenuation AttenuationSettings;
		
		/// <summary>If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component</summary>
		public FSoundAttenuationSettings AttenuationOverrides;
		
		/// <summary>What sound concurrency to use for sounds generated by this audio component</summary>
		public USoundConcurrency ConcurrencySettings;
		
		
	}
	
}
